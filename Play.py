import time
import rtmidi

ADN = [['695660', '587058', '485850', '555267'], ['616357', '726466', '536551', '575049'], ['487050', '726250', '506948', '526064'], ['635151', '716860', '536268', '706159'], ['485161', '705658', '686054', '674849'], ['596272', '535657', '515166', '497049'], ['706259', '515165', '726962', '546357'], ['715965', '647050', '637150', '636262'], ['636251', '645954', '675353', '515458'], ['586550', '716050', '526563', '535654'], ['725452', '526466', '516969', '716052'], ['537270', '575871', '566963', '695658'], ['546553', '726963', '496360', '687254'], ['536368', '656369', '675852', '654972'], ['595256', '667266', '516448', '655148'], ['674871', '685368', '636871', '605851'], ['655659', '655271', '615269', '656659'], ['566650', '647055', '505262', '676353'], ['586556', '646569', '596148', '696270'], ['505572', '635163', '697166', '615949'], ['575451', '637052', '584866', '725348'], ['705057', '645860', '485569', '597071'], ['547169', '655653', '516857', '696559'], ['647048', '505868', '625754', '575551'], ['574861', '724866', '595267', '555753'], ['626056', '596658', '566148', '576967'], ['497171', '625256', '566267', '676068'], ['576367', '676649', '654856', '705357'], ['706772', '644965', '666055', '646753'], ['627259', '706169', '724963', '576665'], ['595656', '635258', '676659', '697167'], ['715772', '526471', '716470', '537263'], ['696151', '537160', '495256', '705865'], ['627151', '725662', '626261', '575563'], ['497261', '515772', '514864', '634866'], ['545055', '596164', '544954', '644864'], ['696969', '727172', '695262', '546751'], ['627168', '547269', '605367', '644970'], ['605551', '605871', '605166', '515261'], ['655653', '726067', '644950', '695558'], ['517050', '725948', '516253', '685448'], ['565170', '635662', '725772', '595870'], ['725552', '576251', '646763', '625365'], ['646661', '695261', '624962', '535471'], ['596261', '515948', '696459', '656658'], ['707155', '545171', '505659', '505169'], ['686163', '707064', '516867', '615956'], ['697054', '526661', '625855', '495369'], ['505763', '717149', '556456', '536255'], ['615667', '715357', '666863', '606653'], ['666366', '675248', '616069', '625871'], ['506261', '525348', '706766', '715561'], ['525452', '704958', '514861', '536360'], ['605858', '625551', '606748', '566257'], ['506965', '515168', '645169', '666148'], ['545049', '607251', '645854', '626650'], ['616865', '506162', '695468', '716253'], ['487167', '614865', '665669', '557062'], ['507054', '605969', '607151', '545360'], ['565862', '625666', '646065', '715849'], ['595668', '516653', '654849', '716149'], ['566356', '635955', '624954', '546455'], ['555354', '575657', '567156', '715248'], ['546355', '726371', '546756', '716461'], ['484866', '617056', '626267', '727249'], ['586264', '636057', '625666', '694860'], ['695765', '666457', '567267', '496062'], ['645353', '675962', '535968', '606870'], ['626951', '654952', '495463', '716470'], ['585061', '605264', '645766', '705169'], ['716967', '595548', '726468', '606848'], ['576154', '556769', '546669', '635865'], ['534962', '516769', '726970', '646248'], ['577168', '617170', '536865', '635570'], ['545448', '707248', '486660', '555460'], ['536265', '585168', '716060', '706051'], ['636449', '546172', '585872', '624958'], ['704952', '536252', '536061', '637256'], ['614859', '536052', '697059', '614951'], ['605171', '495155', '665460', '594849'], ['726358', '536961', '575460', '497262'], ['516954', '575270', '525656', '695766'], ['674960', '665453', '635271', '694854'], ['575862', '656749', '656561', '657070'], ['706253', '587053', '486062', '656268'], ['516663', '624864', '615966', '545857'], ['576671', '645450', '686571', '667248'], ['695864', '535271', '526864', '515262'], ['704970', '665556', '526748', '574953'], ['597062', '527161', '635660', '596560'], ['715849', '565160', '606858', '665058'], ['555663', '556449', '676668', '656064'], ['595162', '705359', '545168', '605366'], ['586566', '547062', '526161', '586759'], ['496757', '716269', '615863', '645266'], ['515659', '605250', '527264', '505855'], ['576571', '515257', '696462', '715364'], ['555157', '527269', '515560', '576968'], ['515964', '656858', '644852', '496061'], ['677151', '535054', '606064', '535050']]
chordProgression = ['535762', '555962', '525760', '555760', '535760', '555962', '55596064', '54576064']

def numConcat(num1, num2):
    num1 = str(num1)
    num2 = str(num2)
    num1 += num2
    return int(num1)

def playADN(data):
    midiout = rtmidi.MidiOut()
    available_ports = midiout.get_ports()
    print(available_ports, "\n")

    # Attempt to open the port
    if available_ports:
        midiout.open_port(1)
    else:
        midiout.open_virtual_port("My virtual output")

    for k in range(len(data)):
        print("Iteracion: ", k+1)
        for i in range (len(data[k])):
            #note on
            try:
                a = numConcat(data[k][i][0], data[k][i][1])
                b = numConcat(data[k][i][2], data[k][i][3])
                c = numConcat(data[k][i][4], data[k][i][5])
                d = numConcat(data[k][i][6], data[k][i][7])
                print(a, b, c, d)
            except:
                print(a, b, c)
                pass
            try:
                midiout.send_message([0x90, a, 127])
                midiout.send_message([0x90, b, 127])
                midiout.send_message([0x90, c, 127])
                midiout.send_message([0x90, d, 127])
            except:
                pass
            time.sleep(2.0)
            #note off
            try:
                a = (0x80, a, 0)
                b = (0x80, b, 0)
                c = (0x80, c, 0)
                d = (0x80, d, 0)
            except:
                pass
            try:
                midiout.send_message(a)
                midiout.send_message(b)
                midiout.send_message(c)
                midiout.send_message(d)
            except:
                pass

    del midiout

def playChordProgression(data):

    midiout = rtmidi.MidiOut()
    available_ports = midiout.get_ports()
    print(available_ports, "\n")

    # Attempt to open the port
    if available_ports:
        midiout.open_port(1)
    else:
        midiout.open_virtual_port("My virtual output")
    for j in range(10):
        for i in range(len(data)):
            # note on
            try:
                a = numConcat(data[i][0], data[i][1])
                b = numConcat(data[i][2], data[i][3])
                c = numConcat(data[i][4], data[i][5])
                d = numConcat(data[i][6], data[i][7])
                print(a, b, c, d)
            except:
                print(a, b, c)
                pass
            try:
                midiout.send_message([0x90, a, 127])
                midiout.send_message([0x90, b, 127])
                midiout.send_message([0x90, c, 127])
                midiout.send_message([0x90, d, 127])
            except:
                pass
            time.sleep(2.0)
            # note off
            try:
                a = (0x80, a, 0)
                b = (0x80, b, 0)
                c = (0x80, c, 0)
                d = (0x80, d, 0)
            except:
                pass
            try:
                midiout.send_message(a)
                midiout.send_message(b)
                midiout.send_message(c)
                midiout.send_message(d)
            except:
                pass
    del midiout

playADN(ADN)
playChordProgression(chordProgression)

